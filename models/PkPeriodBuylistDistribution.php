<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "pk_period_buylist_100".
 *
 * @property string $id
 * @property integer $product_id
 * @property string $period_id
 * @property integer $user_id
 * @property string $buy_size
 * @property integer $buy_table
 * @property integer $ip
 * @property integer $source
 * @property string $buy_time
 */
class PkPeriodBuylistDistribution extends \yii\db\ActiveRecord
{

    private static $_tableId;

    public static function instantiate($row)
    {
        return new static(static::$_tableId);
    }

    public function __construct($tableId, $config = [])
    {
        parent::__construct($config);
        static::$_tableId = $tableId;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        $tableId = substr(static::$_tableId, 0, 3);
        return 'pk_period_buylist_' . $tableId;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['product_id', 'period_id', 'user_id', 'buy_size', 'ip', 'buy_time'], 'required'],
            [['product_id', 'period_id', 'user_id', 'buy_size', 'buy_table', 'ip', 'source'], 'integer'],
            [['buy_time'], 'string', 'max' => 16],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'product_id' => 'Product ID',
            'period_id' => 'Period ID',
            'user_id' => 'User ID',
            'buy_size' => 'Buy Size',
            'buy_table' => 'Buy Table',
            'ip' => 'Ip',
            'source' => 'Source',
            'buy_time' => 'Buy Time',
        ];
    }

    /**
     * @param $tableId
     * @return \yii\db\ActiveQuery the newly created [[ActiveQuery]] instance.
     */
    public static function findByTableId($tableId)
    {
        $model = new static($tableId);
        return $model::find();
    }

    /**
     * @param $tableId
     * @param $condition
     * @return \yii\db\ActiveRecord|null ActiveRecord instance matching the condition, or `null` if nothing matches.
     */
    public static function findOneByTableId($tableId, $condition)
    {
        $model = new static($tableId);
        return $model::findOne($condition);
    }

    /**
     * @param $tableId
     * @param $condition
     * @return \yii\db\ActiveRecord[] an array of ActiveRecord instances, or an empty array if nothing matches.
     */
    public static function findAllByTableId($tableId, $condition)
    {
        $model = new static($tableId);
        return $model::findAll($condition);
    }

    /**
     * @param $tableId
     * @param $attributes
     * @param string $condition
     * @param array $params
     * @return mixed
     */
    public static function updateAllByTableId($tableId, $attributes, $condition = '', $params = [])
    {
        $model = new static($tableId);
        return $model::updateAll($attributes, $condition, $params); // TODO: Change the autogenerated stub
    }
}
