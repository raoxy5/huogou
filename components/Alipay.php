<?php
/**
 * Created by PhpStorm.
 * User: jun
 * Date: 16/6/30
 * Time: 下午3:45
 */
namespace app\components;

use yii\base\Component;

class Alipay extends Component
{

    //合作身份者id，以2088开头的16位纯数字
    public $partner;

    // 签约卖家支付宝账号
    public $seller_id;

    //商户的私钥（后缀是.pen）
    public $private_key_path;

    //支付宝公钥（后缀是.pen
    public $ali_public_key_path;

    //ca证书路径地址，用于curl中ssl校验
    //请保证cacert.pem文件在当前文件夹目录中
    public $cacert;

    //签名方式 不需修改
    public $sign_type = 'RSA';

    //字符编码格式 目前支持 gbk 或 utf-8
    public $input_charset = 'utf-8';

    //访问模式,根据自己的服务器是否支持ssl访问，若支持请选择https；若不支持请选择http
    public $transport = 'http';

    // 支付类型 ，无需修改
    public $payment_type = '1';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->private_key_path = \Yii::getAlias($this->private_key_path);
        $this->ali_public_key_path = \Yii::getAlias($this->ali_public_key_path);
        $this->cacert = \Yii::getAlias($this->cacert);
    }


    /**获取app下单参数
     * @param $orderNo 商户订单号
     * @param $subject 商品名称
     * @param $body     商品详情
     * @param $total_fee 商品价格
     * @param $notify_url 通知url
     * @return array
     */
    public function getAppOrderParams($orderNo, $subject, $body, $total_fee, $notify_url)
    {

        $params = [
            'partner' => $this->partner,
            'seller_id' => $this->seller_id,
            'out_trade_no' => $orderNo,
            'subject' => $subject,
            'body' => $body,
            'total_fee' => $total_fee,
            'notify_url' => $notify_url,
            'service' => 'mobile.securitypay.pay',
            'payment_type' => $this->payment_type,
            '_input_charset' => $this->input_charset,
            'it_b_pay' => '30m',
            'return_url' => 'm.alipay.com',
            'show_url' => 'm.alipay.com',
            'sign_type' => $this->sign_type,
            'appScheme' => '',
        ];

        require_once(\Yii::getAlias('@app/components/alipay/lib/alipay_submit.class.php'));

        $alipay_config = [
            'sign_type' => $this->sign_type,
            'private_key_path' => $this->private_key_path,
        ];
        //生成签名结果
        $alipaySubmit = new \AlipaySubmit($alipay_config);

        $para = $alipaySubmit->buildRequestPara($params);
        $para_str = '';
        foreach ($para as $key=>$val) {
            $paraVal = $val;
            if ($key == 'sign') {
                $paraVal = urlencode($val);
            }
            $para_str .= $key . '=' . $paraVal .'&';
        }
        $para_str = rtrim($para_str, '&');
        return ['params_str' => $para_str, 'out_trade_no' => $orderNo];
    }

    /**
     * @param $out_trade_no 商户订单号，商户网站订单系统中唯一订单号，必填
     * @param $total_fee 付款金额，必填
     * @param $noticeurl
     * @param $returnurl
     * @param $showurl 收银台页面上，商品展示的超链接，必填
     * @param $subject 订单名称，必填
     * @param $body 商品描述，可空
     */
    public function wapPay($out_trade_no, $total_fee, $noticeurl, $returnurl, $showurl, $subject, $body)
    {
        require_once(\Yii::getAlias('@app/components/alipay/lib/alipay_submit.class.php'));


        $alipay_config = [
            'partner' => $this->partner,
            'seller_id' => $this->seller_id,
            'private_key_path' => $this->private_key_path,
            'ali_public_key_path' => $this->ali_public_key_path,
            'notify_url' => $noticeurl,
            'return_url' => $returnurl,
            'sign_type' => $this->sign_type,
            'input_charset' => $this->input_charset,
            'cacert' => $this->cacert,
            'transport' => $this->transport,
            'payment_type' => $this->payment_type,
            'service' => "alipay.wap.create.direct.pay.by.user",
        ];
        //构造要请求的参数数组，无需改动
        $parameter = array(
            "service" => $alipay_config['service'],
            "partner" => $alipay_config['partner'],
            "seller_id" => $alipay_config['seller_id'],
            "payment_type" => $alipay_config['payment_type'],
            "notify_url" => $alipay_config['notify_url'],
            "return_url" => $alipay_config['return_url'],
            "_input_charset" => trim(strtolower($alipay_config['input_charset'])),
            "out_trade_no" => $out_trade_no,
            "subject" => $subject,
            "total_fee" => $total_fee,
            "show_url" => $showurl,
            "body" => $body,
            //其他业务参数根据在线开发文档，添加参数.文档地址:https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.2Z6TSk&treeId=60&articleId=103693&docType=1
            //如"参数名"	=> "参数值"   注：上一个参数末尾需要“,”逗号。

        );

        //建立请求
        $alipaySubmit = new \AlipaySubmit($alipay_config);
        return $alipaySubmit->buildRequestForm($parameter, "get", "确认");
    }

    /**
     * @param $out_trade_no 商户订单号，商户网站订单系统中唯一订单号，必填
     * @param $total_fee 付款金额，必填
     * @param $noticeurl
     * @param $returnurl
     * @param $subject 订单名称，必填
     * @param $body 商品描述，可空
     */
    public function redirectPay($out_trade_no, $total_fee, $noticeurl, $returnurl, $subject, $body)
    {
        require_once(\Yii::getAlias('@app/components/alipay/lib/alipay_submit.class.php'));

        $alipay_config = [
            'partner' => $this->partner,
            'seller_id' => $this->seller_id,
            'private_key_path' => $this->private_key_path,
            'ali_public_key_path' => $this->ali_public_key_path,
            'notify_url' => $noticeurl,
            'return_url' => $returnurl,
            'sign_type' => $this->sign_type,
            'input_charset' => $this->input_charset,
            'cacert' => $this->cacert,
            'transport' => $this->transport,
            'payment_type' => $this->payment_type,
            'service' => "create_direct_pay_by_user",
            'anti_phishing_key' => '',
            'exter_invoke_ip' => '',
        ];


        //构造要请求的参数数组，无需改动
        $parameter = array(
            "service"       => $alipay_config['service'],
            "partner"       => $alipay_config['partner'],
            "seller_id"  => $alipay_config['seller_id'],
            "payment_type"	=> $alipay_config['payment_type'],
            "notify_url"	=> $alipay_config['notify_url'],
            "return_url"	=> $alipay_config['return_url'],

            "anti_phishing_key"=>$alipay_config['anti_phishing_key'],
            "exter_invoke_ip"=>$alipay_config['exter_invoke_ip'],
            "out_trade_no"	=> $out_trade_no,
            "subject"	=> $subject,
            "total_fee"	=> $total_fee,
            "body"	=> $body,
            "_input_charset"	=> trim(strtolower($alipay_config['input_charset']))
            //其他业务参数根据在线开发文档，添加参数.文档地址:https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.kiX33I&treeId=62&articleId=103740&docType=1
            //如"参数名"=>"参数值"

        );

        //建立请求
        $alipaySubmit = new \AlipaySubmit($alipay_config);
        return $alipaySubmit->buildRequestForm($parameter,"get", "确认");
    }

    public function notify($successCallback, $failCallback, $finishCallback)
    {
        require_once(\Yii::getAlias('@app/components/alipay/lib/alipay_notify.class.php'));
        $alipay_config = [
            'partner' => $this->partner,
            'private_key_path' => $this->private_key_path,
            'ali_public_key_path' => $this->ali_public_key_path,
            'sign_type' => $this->sign_type,
            'input_charset' => $this->input_charset,
            'cacert' => $this->cacert,
            'transport' => $this->transport,
        ];
        $alipayNotify = new \AlipayNotify($alipay_config);
        $verify_result = $alipayNotify->verifyNotify();

        if ($verify_result) {//验证成功
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //请在这里加上商户的业务逻辑程序代


            //——请根据您的业务逻辑来编写程序（以下代码仅作参考）——

            //获取支付宝的通知返回参数，可参考技术文档中服务器异步通知参数列表

            //商户订单号

            $out_trade_no = $_POST['out_trade_no'];

            //支付宝交易号

            $trade_no = $_POST['trade_no'];

            //交易状态
            $trade_status = $_POST['trade_status'];


            if ($_POST['trade_status'] == 'TRADE_FINISHED') {
                //判断该笔订单是否在商户网站中已经做过处理
                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                //如果有做过处理，不执行商户的业务程序

                //注意：
                //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
                //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的

                //调试用，写文本函数记录程序运行情况是否正常
                //logResult("这里写入想要调试的代码变量值，或其他运行的结果记录");
                 echo "success";        //请不要修改或删除
                 return call_user_func($finishCallback, $_POST);
            } else if ($_POST['trade_status'] == 'TRADE_SUCCESS') {
                //判断该笔订单是否在商户网站中已经做过处理
                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                //如果有做过处理，不执行商户的业务程序

                //注意：
                //付款完成后，支付宝系统发送该交易状态通知
                //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的

                //调试用，写文本函数记录程序运行情况是否正常
                //logResult("这里写入想要调试的代码变量值，或其他运行的结果记录");

                echo "success";        //请不要修改或删除
                return call_user_func($successCallback, $_POST);
            }

            echo "success";        //请不要修改或删除
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } else {
            //验证失败
            echo "fail";
            call_user_func($failCallback, $_GET);

            //调试用，写文本函数记录程序运行情况是否正常
            //logResult("这里写入想要调试的代码变量值，或其他运行的结果记录");
        }
    }


}